var documenterSearchIndex = {"docs":
[{"location":"lib/public/#Public-Documentation-1","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for Tries.jl's public interface.","category":"page"},{"location":"lib/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Tries\nTrie\nSubTrie\nget\nget!\nshow\nisempty\nkeytype\neltype\nhaskey\nsubtrie\nsubtrie!\ngetindex\nsetindex!\npairs\nvalues\nkeys","category":"page"},{"location":"lib/public/#Tries","page":"Public","title":"Tries","text":"Implemented of a Trie data structure.   This is an associative data structure with keys of type NTuple{N,K} where N and values of type V.\n\n\n\n\n\n","category":"module"},{"location":"lib/public/#Tries.Trie","page":"Public","title":"Tries.Trie","text":"Trie{K,T}()\n\nConstruct an empty Trie{K,T} with root value missing.\n\n\n\n\n\nTrie{K,T}(value)\n\nConstruct an empty Trie{K,T} with root value is value.\n\n\n\n\n\nTrie(values::Vararg{Pair{NTuple{N,K},T} where N}) where {K,T}\nTrie(values::Vararg{Pair{Vector{K},T}}) where {K,T}\nTrie(values::Vararg{Pair{NTuple{N,K},<:Any} where N}) where {K}\nTrie(values::Base.Generator)\n\nConstruct a Trie{K,T} and populate it with r[k...]=v.\n\njulia> Trie((:a,)=>\"a\", (:a,:b)=>\"c\", (:a,:c,:d)=>\"z\", (:a,:b,:d)=>1)\nTrie{Symbol,Any}\n└─ :a => \"a\"\n   ├─ :b => \"c\"\n   │  └─ :d => 1\n   └─ :c\n      └─ :d => \"z\"\n\n\njulia> Trie((:a,)=>\"a\", (:a,:b)=>\"c\", (:a,:c,:d)=>\"z\", (:a,:b,:d)=>\"y\")\nTrie{Symbol,String}\n└─ :a => \"a\"\n   ├─ :b => \"c\"\n   │  └─ :d => \"y\"\n   └─ :c\n      └─ :d => \"z\"\n\n\nSee also setindex!.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#Tries.SubTrie","page":"Public","title":"Tries.SubTrie","text":"A Trie with a path.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#Base.get","page":"Public","title":"Base.get","text":"Base.get(x::Trie)\nBase.get(x::SubTrie)\n\nReturn value::Union{Missing,eltype(x)} of x.\n\n\n\n\n\nBase.get(x::Trie,k)\n\nReturns subtrie(x,k).value.\n\nSee also subtrie\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.get!","page":"Public","title":"Base.get!","text":"Base.get!(x::Trie,k)\n\nReturns subtrie!(x,k).value.\n\nSee also subtrie!\n\n\n\n\n\nBase.get!(x::Trie,k)\n\nReturns subtrie!(x,k).value.\n\nSee also subtrie!\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.show","page":"Public","title":"Base.show","text":"Base.show(x::Trie)\nBase.show(x::SubTrie)\n\nDisplay x with AbstractTrees.print_tree.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.isempty","page":"Public","title":"Base.isempty","text":"Base.isempty(x::Trie)\n\nReturns true iif x has no nodes.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.keytype","page":"Public","title":"Base.keytype","text":"Base.keytype(::Type{Trie{K,V}}) where {K,V}\nBase.keytype(::Trie{K,V}) where {K,V}\n\nReturns K.\n\nwarning: Warning\nplease review: should this return NTuple{N,K} where N?\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.eltype","page":"Public","title":"Base.eltype","text":"Base.eltype(::Type{Trie{K,V}}) where {K,V}\nBase.eltype(::Trie{K,V}) where {K,V}\n\nReturns V.\n\nwarning: Warning\nplease review: should this return Union{V,Missing}?\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.haskey","page":"Public","title":"Base.haskey","text":"Base.haskey(x::Trie,path)\n\nReturns true iif x has nodes along path.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Tries.subtrie","page":"Public","title":"Tries.subtrie","text":"subtrie(x::Trie{K,T},path...)\n\nReturn a subtree at path.\n\njulia> a = Trie((:a,)=>\"a\", (:a,:b)=>\"c\", (:a,:c,:d)=>\"z\", (:a,:b,:d)=>\"y\")\nTrie{Symbol,String}\n└─ :a => \"a\"\n   ├─ :b => \"c\"\n   │  └─ :d => \"y\"\n   └─ :c\n      └─ :d => \"z\"\n\njulia> subtrie(a, :a, :b)\nSubTrie{Symbol,String} @ :a, :b => \"c\"\n└─ :d => \"y\"\n\njulia> subtrie(a, :a, :d, :b)\nERROR: KeyError: key (:d, :b) not found\nStacktrace:\n [1] subtrie(::Trie{Symbol,String}, ::Symbol, ::Vararg{Symbol,N} where N) at /home/gregor/dev/julia/Tries/src/Tries.jl:328\n [2] top-level scope at /home/gregor/dev/julia/Tries/docs/make.jl:12\n\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Tries.subtrie!","page":"Public","title":"Tries.subtrie!","text":"subtrie!(x::Trie,path...)\n\nReturn a subtree at path. Nodes missing in x along path are created and populated with values missing.\n\n\n\n\n\nsubtrie!(f::Function,x::Trie,path...)\n\nReturn a subtree at path. Nodes missing in x along path are created and populated with values f(partial_path).\n\njulia> a = Trie{Int,Int}(0)\nTrie{Int64,Int64} => 0\n\njulia> subtrie!(length, a, 4,3,2,1)\nSubTrie{Int64,Int64} @ 4, 3, 2, 1 => 4\n\njulia> a\nTrie{Int64,Int64} => 0\n└─ 4 => 1\n   └─ 3 => 2\n      └─ 2 => 3\n         └─ 1 => 4\n\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.getindex","page":"Public","title":"Base.getindex","text":"Base.getindex(x::Trie{K,T}, path...) where {K,T}\n\nGet SubTrie at path.\n\nSee also SubTrie.\n\n\n\n\n\nBase.getindex(x::SubTrie, path...)\n\nGet SubTrie at (x.path...,path...).\n\nSee also SubTrie.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.setindex!","page":"Public","title":"Base.setindex!","text":"Base.setindex!(x::Trie{K,T}, v::T, path...) where {K,T}\n\nSet value at path to `v and return previous value or missing.\n\nnote: Note\nTo retrieve last value you need to call setindex! explicitly.\n\njulia> x = Trie((:a,)=>\"a\", (:a,:b)=>\"c\", (:a,:c,:d)=>\"z\", (:a,:b,:d)=>\"y\")\nTrie{Symbol,String}\n└─ :a => \"a\"\n   ├─ :b => \"c\"\n   │  └─ :d => \"y\"\n   └─ :c\n      └─ :d => \"z\"\n\njulia> x[:a,:b,:z]=\"node added\"\n\"node added\"\n\njulia> setindex!(x,\"value set\",:a,:c)\nTrie{Symbol,String}\n└─ :d => \"z\"\n\n\njulia> x\nTrie{Symbol,String}\n└─ :a => \"a\"\n   ├─ :b => \"c\"\n   │  ├─ :d => \"y\"\n   │  └─ :z => \"node added\"\n   └─ :c => \"value set\"\n      └─ :d => \"z\"\n\n\nSee also subtrie!\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.pairs","page":"Public","title":"Base.pairs","text":"Base.pairs(x::Trie{K,V}) where {K,V}\nBase.pairs(x::SubTrie)\n\nGenerator returning path => value pairs.\n\nSee also AbstractTrees.PreOrderDFS\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.values","page":"Public","title":"Base.values","text":"Base.values(x::Union{Trie,SubTrie})\n\nGenerator returning values as second fields from pairs(x).\n\nSee also pairs\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Base.keys","page":"Public","title":"Base.keys","text":"Base.keys(x::Union{Trie,SubTrie})\n\nGenerator returning paths as first fields from pairs(x).\n\nSee also pairs\n\n\n\n\n\n","category":"function"},{"location":"#Tries.jl-Documentation-1","page":"Home","title":"Tries.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Implemented of a Trie data structure.   This is an associative data structure with keys of type NTuple{N,K} where N and values of type V.","category":"page"},{"location":"#Package-Features-1","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"General trie data structure building on Dict.\nGeneralizes DataStructures Trie from AbstractString to arbitrary key types.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nFuture versions might switch backend to Andy Ferris Dictionaries.jl.","category":"page"},{"location":"#Using-Tries-1","page":"Home","title":"Using Tries","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"using Tries\nx=Trie((:a,)=>\"a\", \n       (:a,:b)=>\"c\", \n\t   (:a,:c,:d)=>\"z\", \n\t   (:a,:b,:d)=>1)\neltype(x)\nx[:a,:b]\nx[:a,:b].path\nget(x[:a,:b])\nget(x[:a][:b,:d])\n\n# \nget(x,[:a,:b])\n\nx[:z]=\"added\"\nget(x[:z])\nx[:z,:n]=\"n\"\nx[:z]\nx[:z,:n]=\"m\"\nx[:z]\nx","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Tries\nx=Trie{Int,Int}(0)\nsubtrie!(x, 1,2,3,4,5) do x\n   x[end]+1\nend\nx\n\ncollect(keys(x))","category":"page"},{"location":"#Library-Outline-1","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [ \"lib/public.md\" ]\nDepth = 5","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"}]
}
